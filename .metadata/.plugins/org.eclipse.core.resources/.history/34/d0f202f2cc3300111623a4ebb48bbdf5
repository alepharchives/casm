/*
 * parser.h
 *
 *  Created on: Dec 22, 2011
 *      Author: shlomi vaknin (039014220)
 *
 *  This file contains the implementation of our parser-combinator-like parser utility.
 *  since C is not functional at all, we couldnt really use combinators techniques, but
 *  i still tried to keep the best feature of parser-combinators, which is composability.
 *
 *  the first argument of each parser function is the head of the string to parse,
 *  the return value of each parser function is NULL on failure, or the head of the REMAINING string,
 *  that still needs to be parsed. meaning each parser CONSUMES as much input as it can, and
 *  returns the rest of the input.
 */

#ifndef PARSER_H_
#define PARSER_H_
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* this is used to by the parser error mechanism */
#define NO_ERR 0
#define CHARIS_ERR 1
#define NUMBER_ERR 2

/* reads a line of input from the keyboard into line, a maximum of max characters long.
 * The return value is the length of the line read. */
int getline(char *line, int max);

/* Parser Functions
 *------------------
 * each parser function receives the head of the input stream in p, and returns the head of
 * the unconsumed string.
 */

/* charIs - only succeeds if the head of the input string is c*/
char* charIs(char* p, char c);
char* charIsE(char* p, char c, int* err);
char* strip(char* p,char* c);
char* matchWordD(char* p, char* m);
char* matchWord(char* p, char* m);
char* getNumber(char*p, float* res, int* err);
char* allDigits(char *p);
char* isDigit(char* p);
char* or (char* p1, char* p2);
int contains (char c, char* p);

#endif /* PARSER_H_ */
