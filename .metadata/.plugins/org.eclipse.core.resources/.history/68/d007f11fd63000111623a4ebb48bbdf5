/*
 * parser.c
 *
 *  Created on: Dec 26, 2011
 *      Author: shlomi
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "mat.h"

#define DO(name)   if      (name  (matchWordD(l, #name)  , &err)) {}
#define OR(name)   else if (name  (matchWordD(l, #name)  , &err)) {}
#define QUIT(name) else if (matchWord(l, #name)) {return 0;}
#define ELSE(msg)  else if (!err){	printf("%s\n",msg);}

#define SHOULD_EXIT if (p==NULL || *p == '\0') return NULL;

#define PF(name) char* name(char* p, int* err)

#define VERIFY_END_OF_PARAMETERS { \
		if (*strip(p," ")!='\n') { \
			*err=1; \
			printf("too many parameters\n"); \
			return NULL; \
		} \
}

/* getline:  read a line, return length */
int getline(char *line, int max)
{
   if (fgets(line, max, stdin) == NULL)
	   return 0;
   else
	   return strlen(line);
}

char* charIsE(char* p, char c, int* err) {
	*err=0;
	if (p!=NULL && *p!='\0'&& *p==c) return ++p;
	*err=1;
	return NULL;
}

char* charIs(char* p, char c) {
	if (p!=NULL && *p!='\0'&& *p==c) return ++p;
	return NULL;
}

int contains (char c, char* p) {
	if (*p=='\0') return 0;
	if (*p==c) return 1;
	return contains(c, p+1);
}

char* strip(char* p,char* c) {
	while (p != NULL && *p!='\0' && contains(*p, c)) p++;
	return p;
}

char* or (char* p1, char* p2) {
	if (p1 == NULL) return p2;
	return p1;
}

char* isDigit(char* p) {
	if (*p == '\0') return NULL;
	if (*p>='0'&&*p<='9') return p+1;
	return NULL;
}

char* allDigits(char *p) {
	if (p==NULL || *p=='\0') return NULL;
	if (!isDigit(p)) return p;
	return allDigits(p+1);
}

char* getNumber(char*p, float* res, int* err) {
	char* e;
	char t;
	int f=1;

	if (p==NULL || *p == '\0') {
		*err=1;
		return NULL;
	}

	e = or(charIs(strip(p," "), '-'), p);
	if (e!=NULL) f=-1;

	e = allDigits(e);
	e = or(charIs(e, '.'), e);
	e = or(allDigits(e), e);

	if (e == NULL) 	return e;

	e = strip(e, " ");
	if ((!charIs(e, ',') && !charIs(e, '\n'))||e==p) {
		*err = 1;
		return NULL;
	}
	t = *e;
	*e = '\0';
	*res = (float)atof(p)*f;
	*e=t;
	return e;
}

char* matchWord(char* p, char* m) {
	if (p==NULL || *m=='\0') return p;
	if (*p==*m) return matchWord(p+1, m+1);
	else return NULL;
}

char* matchWordD(char* p, char* m) {
	return charIs(matchWord(p, m), ' ');
}

Mat Mats[6];

char* getMatrixIndex(char* p, int* matIndex, char* errStr, int* err) {
	if (p==NULL||*p=='\0') return NULL;
	p = matchWord(strip(p, ", "), "MAT_");
	if (p == NULL) {
		printf("Wrong parameters, %s parameter must be a valid matrix identifier\n", errStr);
		*err = 1;
		return NULL;
	}
	*matIndex = *(p++)-'A';
	if (*matIndex<0||*matIndex>5) {
		printf("Wrong parameters, matrix identifier has to be between MAT_A and MAT_F\n");
		*err = 1;
		return NULL;
	}

	return p;
}

PF(print_mat) {
	int matIndex;
	SHOULD_EXIT;

	if((p=getMatrixIndex(strip(p," "), &matIndex, "first", err))) {
		VERIFY_END_OF_PARAMETERS;
		printMat(Mats[matIndex]);
	}
	return p;
}

PF(read_mat) {
	int matIndex;
	float d[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	int i=0;
	SHOULD_EXIT;

	if ((p=getMatrixIndex(p, &matIndex, "first", err))) {

		while (i<16 && *p!='\n' && (p = getNumber(strip(charIsE(strip(p, " "), ',', err)," "), &d[i++], err)));

		if (p==NULL && *err == 1) {
			printf("Wrong parameters, parameter %d must be a real number\n", i+1);
			return NULL;
		}
		initMat(&Mats[matIndex],
				d[0],  d[1], d[2], d[3],
				d[4],  d[5], d[6], d[7],
				d[8],  d[9], d[10],d[11],
				d[12], d[13],d[14],d[15]);
	}
	return p;
}
#define FMAT(n,todo) { \
	int n;\
	SHOULD_EXIT;\
	if(((p=getMatrixIndex(strip(p," "), &n, #n, err)))){\
		todo\
	}\
	return p;\
}

#define SCALAR(n, todo) {\
	float n;\
	if(((p = getNumber(strip(charIsE(strip(p, " "), ',', err)," "), &n, err)))) {\
		todo; \
	}\
	else {\
		if (*err==1) printf("wrong parameters, %s parameter must be separated by ','\n", #n);\
		return NULL;\
	}\
}

#define MAT(n, todo) {\
	int n;\
	if(((p=getMatrixIndex(strip(charIsE(strip(p, " "), ',', err)," "), &n, #n, err)))) {\
		todo; \
	}\
	else {\
		if (*err==1) printf("wrong parameters, %s parameter must be separated by ','\n", #n);\
		return NULL;\
	}\
}

#define THREE_MATRIX(todo) FMAT(first, MAT(second, MAT(third, VERIFY_END_OF_PARAMETERS; todo(Mats[first], Mats[second], &Mats[third]))))
#define TWO_MATRIX(todo)   FMAT(first, MAT(second, VERIFY_END_OF_PARAMETERS; todo(Mats[first], &Mats[second])))

PF(add_mat)   THREE_MATRIX(add)
PF(sub_mat)   THREE_MATRIX(sub)
PF(mul_mat)   THREE_MATRIX(mul)
PF(trans_mat) TWO_MATRIX(transMat)
PF(mul_scalar) FMAT(first, SCALAR(second, MAT(third, mulScalar(Mats[first], second, &Mats[third]))))

/*/Fuck Studies */
int main(void) {

	char line[1000];
	char *l;
	int err = 0;

	while (1) {

		getline(line, sizeof(line));
		l = strip(line, " ");

		DO(read_mat) OR(add_mat) OR(print_mat) OR(sub_mat) OR(mul_mat) OR(trans_mat) OR(mul_scalar)
		QUIT(stop) ELSE("no such command")
	}

	return 0;
}
